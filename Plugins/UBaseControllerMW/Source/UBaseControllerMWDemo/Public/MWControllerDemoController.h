// Copyright 2018, Institute for Artificial Intelligence - University of Bremen
// Author: Patrick Kellmann

#pragma once
#include "CoreMinimal.h"
#include "GameFramework/PlayerController.h"
#include "MWControllerComponent.h"
#include "MWControllerDemoController.generated.h"

/*
* MWControllerDemoController is the PlayerController for the demo part of the MecanumWheelBaseController.
* He transmits through bindings inputs. He thereby defends the ROS input scheme.
*/
UCLASS()
class UBASECONTROLLERMWDEMO_API AMWControllerDemoController: public APlayerController
{
	GENERATED_BODY()

	public:
	/*
	* Constructor PlayerController.
	* Searches for the actor holding the StaticMeshComponents and the MWControllerComponent.
	*/
	AMWControllerDemoController();

	/*
	* Uses the inputs defined in the editor and forwards them to function.
	*/
	void SetupInputComponent();


	/*
	* Called when the game starts or when spawned. Sets the MWController. For problems, the tick is suspended.
	*/
	virtual void BeginPlay() override;

	/*
	* Processes player input. Sends every tick two vectors with information of the inputs.
	*/
	virtual void PlayerTick(float DeltaTime) override;


	private:
	/*
	* Movement functions that have the same structure. These functions get a motion value and store it in vectors.
	*
	* @param ControllerInput Input value generated by the physical operation of the controller.
	*/
	void SetLongitudinalMovement(const float ControllerInput);
	void SetTransversalMovement(const float ControllerInput);
	void SetAngularMovement(const float ControllerInput);


	/*
	* Functions control pressing the deadman's button
	*/
	void DeadmanPressed();
	void DeadmanReleased();

	// Default Name for the Actor MWRobotBaseActor.
	const FString MWRobotBaseActorName = "MWRobotBaseActor";

	// Saves the actor holding the robot.
	UPROPERTY(VisibleAnywhere, Category = "MWRobotBaseActor")
		AActor* MWRobotBaseActor = nullptr;

	//Saves the MWController.
	UPROPERTY(VisibleAnywhere, Category = "MWRobotBaseActor")
		UMWControllerComponent* MWConComp = nullptr;

	// For the implementation of the deadman's function.
	bool bDeadman = false; 

	// Vector for SetLongitudinalMovement and SetTransversalMovement. Will be handed over every tick to MWController.
	FVector LinearVelocity = FVector::ZeroVector;

	// Vector for SetAngularMovement. Will be handed over every tick.
	FVector AngularVelocity = FVector::ZeroVector;
};


